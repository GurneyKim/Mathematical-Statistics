/* FileName: boots.iml   */
/* Huber's M-estimation  */

proc iml;

  x = {20 25 25 27 28 31 33 34 36 37 44 50 59 85 86};
  n = ncol(x);
  B = 999;
  theta_M = j(B,1,0);
  xstar = j(1,n,0);

  start boots;
    do i=1 to n;  xstar[i] = x[int(n*ranuni(0))+1];  end;

    mean = xstar[,+]/n;  ;
    y = j(1,n,0);  r = rank(xstar);
    do i=1 to n;   y[r[i]] = xstar[i];   end;
    if mod(n,2) ^= 0 then median = y[(n+1)/2];
      else median = (y[n/2] + y[n/2+1])/2;
    x1 = abs(xstar - median*j(1,n,1));
    r1 = rank(x1);
    do i=1 to n;   y[r1[i]] = x1[i];   end;
    if mod(n,2) ^= 0 then mad = y[(n+1)/2]/0.6745;
      else mad = (y[n/2] + y[n/2+1])/2/0.6745;
    k = 1.5;   theta0 = median;   iter=0;   diff=1;
    do while (diff > 0.0001);
     temp = (xstar-theta0*j(1,n,1))/mad;
     num = temp;  denum = j(1,n,1);
     do i = 1 to n;
       if temp[i] > k then num[i] = k;
         else if temp[i] < -k then num[i] = -k;
       if abs(temp[i]) > k then denum[i] = 0;
     end;
     theta = theta0 + mad*sum(num)/sum(denum);
     diff = abs(theta-theta0);
     iter = iter+1;
     theta0 = theta;
    end;
    theta_M[repeat] = theta;
  finish;

  do repeat=1 to B;  run boots;  end;
     print theta_M[format=8.2];

  m1 = theta_M[+,]/B;
  se = sqrt((ssq(theta_M)-B*m1*m1)/(B-1));
     print m1[format=8.2] se[format=8.2];

  theta_O = j(B,1,0);  r2 = rank(theta_M);
  do k=1 to B;  theta_O[r2[k]] = theta_M[k];  end;
  l=theta_O[(B+1)*0.025];  u=theta_O[(B+1)*0.975];
  print l[format=8.2] u[format=8.2];

quit;
